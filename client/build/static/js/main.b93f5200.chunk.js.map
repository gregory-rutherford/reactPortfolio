{"version":3,"sources":["Pages/Header.js","Data.js","Pages/Body.js","Components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Column","src","alt","id","projectData","title","ghLink","deployedLink","imgLink","description","Body","useState","data","setData","useEffect","map","item","href","Item","renderAs","size","subtitle","Nav","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gSAyCeA,G,MArCA,WACb,OACE,4BAAQC,UAAU,OAChB,kBAAC,MAAD,KACE,kBAAC,UAAD,KACE,kBAAC,UAAQC,OAAT,KACE,yBACED,UAAU,aACVE,IAAI,8DACJC,IAAI,YAEN,0GAKF,kBAAC,UAAQF,OAAT,KACE,uBAAGD,UAAU,SAAb,uEAIA,yBAAKI,GAAG,WACN,2b,cCmBCC,EA7CK,CAClB,CACEC,MAAO,oBACPC,OAAQ,uCACRC,aAAc,0CACdC,QAAS,kCACTC,YAAa,oNAEf,CACEJ,MAAO,mBACPC,OAAQ,yDACRC,aAAc,8CACdC,QAAS,kCACTC,YAAa,oJAEf,CACEJ,MAAO,aACPC,OAAQ,6CACRC,aAAc,6CACdC,QAAS,kCACTC,YAAa,0OAEf,CACEJ,MAAO,sBACPC,OAAQ,yDACRC,aAAc,yDACdC,QAAS,kCACTC,YAAa,oLAEf,CACEJ,MAAO,kBACPC,OAAQ,2FACRC,aAAc,qDACdC,QAAS,kCACTC,YAAa,6MAEf,CACEJ,MAAO,kBACPC,OAAQ,GACRC,aAAc,0DACdC,QAAS,kCACTC,YAAa,0ICIFC,G,MAxCF,WAAiB,IAAD,EACHC,mBAAS,IADN,mBACpBC,EADoB,KACdC,EADc,KAO3B,OAJAC,oBAAU,WACRD,EAAQT,IACP,IAGD,yBAAKL,UAAU,WACb,uBAAGA,UAAU,UAAb,eACA,yBAAKA,UAAU,QACZa,EAAKG,IAAI,SAAAC,GAAI,OACZ,kBAAC,OAAD,CAAMjB,UAAU,QACd,uBAAGA,UAAU,UAAUkB,KAAMD,EAAKT,cAChC,yBACER,UAAU,aACVE,IAAKe,EAAKR,QACVN,IAAI,aAGR,kBAAC,QAAMgB,KAAP,CAAYC,SAAS,UACnB,yBAAKpB,UAAU,QACb,uBAAGkB,KAAMD,EAAKV,QACZ,kBAAC,UAAD,CAASc,KAAM,GAAIJ,EAAKX,QAE1B,kBAAC,UAAD,CAASgB,UAAQ,EAACD,KAAM,GACrBJ,EAAKP,mBAOlB,uBAAGQ,KAAK,OAAOlB,UAAU,UAAzB,UCCSuB,G,MApCH,WACV,OACE,6BACE,uBAAGvB,UAAU,eACX,uBAAGA,UAAU,eAAekB,KAAK,+BAAjC,UAIF,uBAAGlB,UAAU,eACX,uBACEA,UAAU,eACVkB,KAAK,yCAFP,WAOF,uBAAGlB,UAAU,eACX,uBACEA,UAAU,eACVkB,KAAK,4DAFP,aAOF,uBAAGlB,UAAU,eACX,uBACEA,UAAU,eACVkB,KAAK,0EAFP,cCbOM,MAVf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b93f5200.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Box, Columns } from \"react-bulma-components/full\";\r\nimport \"./header.css\";\r\n\r\nconst Header = function Header() {\r\n  return (\r\n    <header className=\"top\">\r\n      <Box>\r\n        <Columns>\r\n          <Columns.Column>\r\n            <img\r\n              className=\"profileImg\"\r\n              src=\"https://avatars1.githubusercontent.com/u/46570985?s=460&v=4\"\r\n              alt=\"profile\"\r\n            />\r\n            <p>\r\n              Me with an umbrella standing next to \"Hachiko\" at Shibuya Station\r\n              in Tokyo\r\n            </p>\r\n          </Columns.Column>\r\n          <Columns.Column>\r\n            <p className=\"intro\">\r\n              Hi, my name is Gregory Rutherford. I am a full stack web\r\n              developer.\r\n            </p>\r\n            <div id=\"summary\">\r\n              <p>\r\n                I am a recent graduate of the UT Austin Coding Bootcamp. My\r\n                professional background is primarily in logistics, but I am\r\n                excited to demonstrate my new skills and grow as a developer. I\r\n                would like to collaborate with a team of developers to work on\r\n                cutting edge, accessible, and responsive web applications. Currently I'm quite fond of React and most of my recent work has been built using Create React App. \r\n              </p>\r\n            </div>\r\n          </Columns.Column>\r\n        </Columns>\r\n      </Box>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const projectData = [\r\n  {\r\n    title: \"Canine Connection\",\r\n    ghLink: \"https://github.com/ut-group7/DogBook\",\r\n    deployedLink: \"https://canineconnection.herokuapp.com/\",\r\n    imgLink: \"https://i.imgur.com/6dsGFpD.jpg\",\r\n    description: \"My final group project. This project uses the MERN stack. My contribution to this project was setting up the server and backend framework, as well as handling form submission and validation using React Hooks.\"\r\n  },\r\n  {\r\n    title: \"Behavior Tracker\",\r\n    ghLink: \"https://github.com/gregory-rutherford/Behavior-Tracker\",\r\n    deployedLink: \"https://behavior-tracker-gtr.herokuapp.com/\",\r\n    imgLink: \"https://i.imgur.com/p9zJxKu.jpg\",\r\n    description: \"A small scale personal project for practicing React Hooks. This project uses the MERN stack with the FeathersJS package and Mongoose as the ORM.\"\r\n  },\r\n  {\r\n    title: \"Date Night\",\r\n    ghLink: \"https://github.com/ut-group7/Group7Project\",\r\n    deployedLink: \"https://ut-group7.github.io/Group7Project/\",\r\n    imgLink: \"https://i.imgur.com/fmHT61J.jpg\",\r\n    description: \"My first group project. This was written with vanilla Javascript and supplemented with Jquery. My contribution included setting up user authentication through firebase, writing queries for APIs, and assisting with front end logic.\"\r\n  },\r\n  {\r\n    title: \"Megaman Memory Game\",\r\n    ghLink: \"https://github.com/gregory-rutherford/MegamanClickGame\",\r\n    deployedLink: \"https://gregory-rutherford.github.io/MegamanClickGame/\",\r\n    imgLink: \"https://i.imgur.com/kgufZ61.jpg\",\r\n    description: \"My first react app. A simple memory game featuring the robot masters of MMII. Uses Create React App and React class componenets as well as the Fisher-Yates shuffling algorithm.\"\r\n  },\r\n  {\r\n    title: \"Crystal Clicker\",\r\n    ghLink: \"https://github.com/gregory-rutherford/Crystal-Game/blob/master/assets/javascript/game.js\",\r\n    deployedLink: \"https://gregory-rutherford.github.io/Crystal-Game/\",\r\n    imgLink: \"https://i.imgur.com/W1FL8J3.jpg\",\r\n    description: \"A simple game made with Jquery and Javascript. This was an assignment that I enjoyed working on as I had finally begun to understand the concepts of Javascript, and the importantance of organized code.\"\r\n  },\r\n  {\r\n    title: \"CLI Mock Amazon\",\r\n    ghLink: \"\",\r\n    deployedLink: \"https://github.com/gregory-rutherford/Amazon2-TheReturn\",\r\n    imgLink: \"https://i.imgur.com/jTtghFc.jpg\",\r\n    description: \"A mock amazon database. Built with Node.js, Inquirer, SQL, and Javascript. A solid introduction to running SQL queries in Javascript.\"\r\n  }\r\n];\r\n\r\nexport default projectData;","import React, { useState, useEffect } from \"react\";\r\nimport { Card, Media, Heading } from \"react-bulma-components\";\r\nimport projectData from \"../Data.js\";\r\nimport \"./body.css\";\r\n\r\nconst Body = function Body() {\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setData(projectData);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"projBox\">\r\n      <p className=\"recent\">Recent Work</p>\r\n      <div className=\"grid\">\r\n        {data.map(item => (\r\n          <Card className=\"card\">\r\n            <a className=\"imgLink\" href={item.deployedLink}>\r\n              <img\r\n                className=\"projectPic\"\r\n                src={item.imgLink}\r\n                alt=\"project\"       \r\n              />\r\n            </a>\r\n            <Media.Item renderAs=\"figure\">\r\n              <div className=\"text\">\r\n                <a href={item.ghLink}>\r\n                  <Heading size={3}>{item.title}</Heading>\r\n                </a>\r\n                <Heading subtitle size={5}>\r\n                  {item.description}\r\n                </Heading>\r\n              </div>\r\n            </Media.Item>\r\n          </Card>\r\n        ))}\r\n      </div>\r\n      <a href=\"#top\" className=\"anchor\">\r\n        Top\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Body;\r\n","import React from \"react\";\r\nimport \"./nav.css\";\r\n\r\nconst Nav = function Nav() {\r\n  return (\r\n    <nav>\r\n      <p className=\"contactHead\">\r\n        <a className=\"contactLinks\" href=\"mailto:gregorford@gmail.com\">\r\n          email\r\n        </a>\r\n      </p>\r\n      <p className=\"contactHead\">\r\n        <a\r\n          className=\"contactLinks\"\r\n          href=\"https://github.com/gregory-rutherford\"\r\n        >\r\n          github\r\n        </a>\r\n      </p>\r\n      <p className=\"contactHead\">\r\n        <a\r\n          className=\"contactLinks\"\r\n          href=\"https://www.linkedin.com/in/gregory-rutherford-01aba73b/\"\r\n        >\r\n          linkedin\r\n        </a>\r\n      </p>\r\n      <p className=\"contactHead\">\r\n        <a\r\n          className=\"contactLinks\"\r\n          href=\"https://drive.google.com/file/d/19bJeEmeZQrjdfbJyLwCMnNOdKPDcU_1-/view\"\r\n        >\r\n          resume\r\n        </a>\r\n      </p>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport Header from \"./Pages/Header\";\r\nimport Projects from \"./Pages/Body.js\";\r\nimport Nav from \"./Components/Nav\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <Nav />\r\n      <Projects />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}